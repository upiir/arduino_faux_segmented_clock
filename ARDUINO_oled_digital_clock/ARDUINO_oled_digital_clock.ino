// simple project using Arduino UNO R3, 128x64 SSD1306 IIC OLED Display,
// and DS1307 real time clock module to show time using faux segmented digits

// created by upir, 2024
// youtube channel: https://www.youtube.com/upir_upir

// YouTube VIDEO: https://youtu.be/OqqPvb8FEHs
// SOURCE FILES: https://github.com/upiir/arduino_faux_segmented_clock
// WOKWI SKETCH: https://wokwi.com/projects/390534947226203137

// Links from the video:
// 128x64 SSD1306 OLED Display 1.54": https://s.click.aliexpress.com/e/_DCYdWXb
// 128x64 SSD1306 OLED Display 0.96": https://s.click.aliexpress.com/e/_DCKdvnh
// 128x64 SSD1306 OLED Display 2.42": https://s.click.aliexpress.com/e/_DFdMoTh
// Arduino UNO: https://s.click.aliexpress.com/e/_AXDw1h
// Arduino UNO R4: https://s.click.aliexpress.com/e/_DlrJ98v
// RTC - real time clock module: https://s.click.aliexpress.com/e/_DkfaIdP
// Arduino breadboard prototyping shield: https://s.click.aliexpress.com/e/_ApbCwx
// Image2cpp (convert array to image): https://javl.github.io/image2cpp/
// Photopea (online graphics editor like Photoshop): https://www.photopea.com/
// Starting WOKWI project: https://wokwi.com/projects/371852029526395905
// RTC documentation: https://docs.wokwi.com/parts/wokwi-ds1307
// RTC example: https://wokwi.com/projects/305979285237137984

// Videos referenced in the video:
// Posy’s designs ➔ REAL DISPLAYS: https://youtu.be/jz01j1TpM84
// Arduino Wood Clock: https://youtu.be/50bVXHYW_9Q
// Custom Clocks for Smart Watches: https://youtu.be/4M407AYPeH0
// Arduino OLED Clock Project: https://youtu.be/srgsBWHSNSQ
// Clock for your PC: https://youtu.be/o9cor5muQeU

// Related videos with Arduino UNO and 128x64 OLED screen:
// Arduino OLED menu: https://youtu.be/HVHVkKt-ldc
// U8g vs U8g2: https://youtu.be/K5e0lFRvZ2E
// Arduino Parking Sensor - https://youtu.be/sEWw087KOj0
// Turbo pressure gauge with Arduino and OLED display - https://youtu.be/JXmw1xOlBdk
// Arduino Car Cluster with OLED Display - https://youtu.be/El5SJelwV_0
// Knob over OLED Display - https://youtu.be/SmbcNx7tbX8
// Arduino + OLED = 3D ? - https://youtu.be/kBAcaA7NAlA
// Arduino OLED Gauge - https://youtu.be/xI6dXTA02UQ
// Smaller & Faster Arduino - https://youtu.be/4GfPQoIRqW8
// Save Image from OLED Display to PC - https://youtu.be/Ft2pRMVm44E


#include <Arduino.h>
#include <U8g2lib.h> // u8g2 library is used to draw content on the OLED display
#include <Wire.h> // library required for IIC communication
#include "RTClib.h" // real time clock module library

U8G2_SSD1306_128X64_NONAME_F_HW_I2C u8g2(U8G2_R0, /* reset=*/ U8X8_PIN_NONE); // initialization for the used OLED display
RTC_DS1307 rtc; // initialization for the real time clock module

// connection between OLED displa and Arduino UNO, as well as connection between RTC module and Arduino UNO is as follows:
// GND > GND
// VCC > 5V
// SDA (serial data) > A4
// SCL (serial clock) > A5



// generated from the image2cpp website
// 'digital_clock_preview_128x64', 128x64px -- this is a static screenshot that was used for testing drawing a fullscreen image to OLED display
/*
  const unsigned char epd_bitmap_digital_clock_preview_128x64 [] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x07, 0x00, 0xf0, 0xff, 0x7f, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xc0, 0xff, 0xff, 0x03, 0x00, 0xfc, 0xff, 0x3f, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x92, 0x24, 0x41, 0xe0, 0xff, 0xff, 0x11, 0x00, 0xfe, 0xff, 0x1f, 0x01, 0x92, 0x24, 0x41,
  0x00, 0x00, 0x00, 0xe0, 0xf0, 0xff, 0xff, 0x38, 0x00, 0xff, 0xff, 0x8f, 0x03, 0x00, 0x00, 0xe0,
  0x00, 0x00, 0x00, 0xf0, 0xc0, 0xff, 0x7f, 0x3c, 0x00, 0xfc, 0xff, 0xc7, 0x03, 0x00, 0x00, 0xf0,
  0x00, 0x90, 0x24, 0xf8, 0x00, 0xff, 0x3f, 0x3e, 0x00, 0xf0, 0xff, 0xe3, 0x03, 0x90, 0x24, 0xf8,
  0x00, 0x00, 0x00, 0xfc, 0x00, 0x00, 0x00, 0x3f, 0x00, 0x00, 0x00, 0xf0, 0x23, 0x00, 0x00, 0xfc,
  0x00, 0x00, 0x00, 0xfc, 0x00, 0x00, 0x00, 0x3f, 0x00, 0x00, 0x00, 0xf0, 0xe3, 0x00, 0x00, 0xfc,
  0x40, 0x02, 0x00, 0xfc, 0x90, 0x00, 0x00, 0x3f, 0x00, 0x09, 0x00, 0xf0, 0xe3, 0x07, 0x00, 0xfc,
  0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x00, 0xf8, 0xf3, 0x07, 0x00, 0xfe,
  0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x00, 0xf8, 0xf3, 0x07, 0x00, 0xfe,
  0x40, 0x02, 0x00, 0x7e, 0x90, 0x00, 0x80, 0x1f, 0x00, 0x09, 0x00, 0xf8, 0xf1, 0x03, 0x00, 0x7e,
  0x00, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x80, 0x1f, 0x00, 0x00, 0x00, 0xf8, 0xf1, 0x03, 0x00, 0x7e,
  0x00, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x80, 0x1f, 0x00, 0x00, 0x00, 0xf8, 0xf1, 0x03, 0x00, 0x7e,
  0x40, 0x02, 0x00, 0x7e, 0x90, 0x00, 0x80, 0x9f, 0x07, 0x09, 0x00, 0xf8, 0xf1, 0x03, 0x00, 0x7e,
  0x00, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x80, 0x9f, 0x07, 0x00, 0x00, 0xf8, 0xf1, 0x03, 0x00, 0x7e,
  0x00, 0x00, 0x00, 0x7f, 0x00, 0x00, 0xc0, 0x9f, 0x07, 0x00, 0x00, 0xfc, 0xf9, 0x03, 0x00, 0x7f,
  0x48, 0x02, 0x00, 0x7f, 0x92, 0x00, 0xc0, 0x9f, 0x27, 0x09, 0x00, 0xfc, 0xf9, 0x03, 0x00, 0x7f,
  0x00, 0x00, 0x00, 0x3f, 0x00, 0x0c, 0xc0, 0x0f, 0x00, 0xc0, 0x00, 0xfc, 0xf8, 0x31, 0x00, 0x3f,
  0x00, 0x00, 0x00, 0x3f, 0x00, 0x7c, 0xc0, 0x0f, 0x00, 0xc0, 0x07, 0xfc, 0xf8, 0xf1, 0x01, 0x3f,
  0x48, 0x90, 0x04, 0x38, 0x12, 0xfc, 0x01, 0x0e, 0x20, 0xc1, 0x1f, 0xe0, 0xf8, 0xf1, 0x07, 0x38,
  0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x07, 0x00, 0x00, 0xe0, 0x7f, 0x00, 0xf8, 0xf9, 0x1f, 0x00,
  0x00, 0x00, 0x00, 0x01, 0x00, 0xfe, 0x07, 0x00, 0x00, 0xe0, 0x7f, 0x04, 0xc0, 0xf9, 0x1f, 0x01,
  0x00, 0x90, 0x84, 0x0f, 0x00, 0xfe, 0x47, 0x02, 0x00, 0xe0, 0x7f, 0x3e, 0x00, 0xf8, 0x9f, 0x0f,
  0x00, 0x00, 0x80, 0x3f, 0x07, 0xfc, 0x07, 0x00, 0x00, 0xc0, 0x7f, 0xfe, 0x00, 0xf0, 0x9f, 0x3f,
  0x00, 0x00, 0x80, 0x3f, 0x1f, 0xe0, 0x07, 0x00, 0x00, 0x00, 0x7e, 0xfe, 0x00, 0x80, 0x9f, 0x3f,
  0x48, 0x00, 0x84, 0x1f, 0x3f, 0x80, 0x47, 0x02, 0x20, 0x01, 0x78, 0x7e, 0x48, 0x00, 0x9e, 0x1f,
  0x00, 0x00, 0x80, 0x1f, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x80, 0x1f,
  0x00, 0x00, 0x80, 0x1f, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x80, 0x1f,
  0x48, 0x00, 0x80, 0x1f, 0x3f, 0x00, 0x40, 0x02, 0x20, 0x01, 0x00, 0x7e, 0x48, 0x00, 0x80, 0x1f,
  0x00, 0x00, 0xc0, 0x9f, 0x3f, 0x00, 0x00, 0xe0, 0x01, 0x00, 0x00, 0x7f, 0x00, 0x00, 0xc0, 0x1f,
  0x00, 0x00, 0xc0, 0x9f, 0x3f, 0x00, 0x00, 0xe0, 0x01, 0x00, 0x00, 0x7f, 0x00, 0x00, 0xc0, 0x1f,
  0x48, 0x00, 0xc0, 0x1f, 0x1f, 0x00, 0x40, 0xe2, 0x21, 0x01, 0x00, 0x7f, 0x48, 0x00, 0xc0, 0x1f,
  0x00, 0x00, 0xc0, 0x0f, 0x1c, 0x00, 0x00, 0xe0, 0x01, 0x00, 0x00, 0x3f, 0x00, 0x00, 0xc0, 0x0f,
  0x00, 0x00, 0xc0, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x00, 0x00, 0xc0, 0x0f,
  0x00, 0x00, 0xc0, 0x8f, 0x00, 0x00, 0x40, 0x02, 0x08, 0x00, 0x00, 0x3f, 0x00, 0x00, 0xc0, 0x0f,
  0x00, 0x00, 0xc0, 0x8f, 0x07, 0x00, 0x00, 0x00, 0x78, 0x00, 0x00, 0x3f, 0x00, 0x00, 0xc0, 0x0f,
  0x00, 0x00, 0xe0, 0xcf, 0x1f, 0x00, 0x00, 0x00, 0xfc, 0x01, 0x80, 0x3f, 0x00, 0x00, 0xe0, 0x0f,
  0x49, 0x00, 0xe0, 0xcf, 0x1f, 0x00, 0x48, 0x02, 0xfc, 0x01, 0x80, 0x3f, 0x49, 0x00, 0xe0, 0x0f,
  0x00, 0x00, 0xe0, 0xcf, 0x1f, 0x00, 0x00, 0x00, 0xfc, 0x01, 0x80, 0x3f, 0x00, 0x00, 0xe0, 0x0f,
  0x00, 0x00, 0xe0, 0xc7, 0x0f, 0x00, 0x00, 0x00, 0xfc, 0x00, 0x80, 0x1f, 0x00, 0x00, 0xe0, 0x07,
  0x09, 0x00, 0xe0, 0xc7, 0x0f, 0x00, 0x48, 0x00, 0xfc, 0x00, 0x80, 0x1f, 0x09, 0x00, 0xe0, 0x07,
  0x00, 0x00, 0xe0, 0xc7, 0x0f, 0x00, 0x00, 0x00, 0xfc, 0x00, 0x80, 0x1f, 0x00, 0x00, 0xe0, 0x07,
  0x00, 0x00, 0xe0, 0xc7, 0xff, 0xff, 0x00, 0x00, 0xfc, 0xff, 0x8f, 0x1f, 0x00, 0x00, 0xe0, 0x07,
  0x49, 0x92, 0xe0, 0xc3, 0xff, 0xff, 0x48, 0x00, 0xfc, 0xff, 0x8f, 0x0f, 0x49, 0x92, 0xe0, 0x03,
  0x00, 0x00, 0xf0, 0xc3, 0xff, 0xff, 0x00, 0x00, 0xfc, 0xff, 0xcf, 0x0f, 0x00, 0x00, 0xf0, 0x03,
  0x00, 0x00, 0xf0, 0x81, 0xff, 0xff, 0x00, 0x00, 0xf8, 0xff, 0xcf, 0x07, 0x00, 0x00, 0xf0, 0x01,
  0x48, 0x92, 0xf0, 0x00, 0xff, 0xff, 0x08, 0x00, 0xf0, 0xff, 0xcf, 0x03, 0x48, 0x92, 0xf0, 0x00,
  0x00, 0x00, 0x30, 0x00, 0xfe, 0x7f, 0x00, 0x00, 0xe0, 0xff, 0xc7, 0x00, 0x00, 0x00, 0x30, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
  };*/

// 'digit_0', 32x49px
const unsigned char epd_bitmap_digit_0 [] PROGMEM = {
  0x00, 0xfc, 0xff, 0x1f, 0x00, 0xff, 0xff, 0x0f, 0x80, 0xff, 0xff, 0x47, 0xc0, 0xff, 0xff, 0xe3,
  0x00, 0xff, 0xff, 0xf1, 0x00, 0xfc, 0xff, 0xf8, 0x20, 0x00, 0x00, 0xfc, 0xe0, 0x00, 0x00, 0xfc,
  0xe0, 0x07, 0x00, 0xfc, 0xf0, 0x07, 0x00, 0xfe, 0xf0, 0x07, 0x00, 0xfe, 0xf0, 0x03, 0x00, 0x7e,
  0xf0, 0x03, 0x00, 0x7e, 0xf0, 0x03, 0x00, 0x7e, 0xf0, 0x03, 0x00, 0x7e, 0xf0, 0x03, 0x00, 0x7e,
  0xf8, 0x03, 0x00, 0x7f, 0xf8, 0x03, 0x00, 0x7f, 0xf8, 0x11, 0x00, 0x3f, 0xf8, 0x01, 0x00, 0x3f,
  0xf8, 0x01, 0x00, 0x38, 0xf8, 0x91, 0x04, 0x00, 0xc0, 0x01, 0x00, 0x01, 0x00, 0x00, 0x80, 0x0f,
  0x1c, 0x90, 0x84, 0x3f, 0x7c, 0x00, 0x80, 0x3f, 0xfc, 0x00, 0x80, 0x1f, 0xfc, 0x00, 0x80, 0x1f,
  0xfc, 0x00, 0x80, 0x1f, 0xfc, 0x00, 0x80, 0x1f, 0xfe, 0x00, 0xc0, 0x1f, 0xfe, 0x00, 0xc0, 0x1f,
  0x7c, 0x00, 0xc0, 0x1f, 0x70, 0x00, 0xc0, 0x0f, 0x00, 0x00, 0xc0, 0x0f, 0x02, 0x00, 0xc0, 0x0f,
  0x1e, 0x00, 0xc0, 0x0f, 0x7f, 0x00, 0xe0, 0x0f, 0x7f, 0x00, 0xe0, 0x0f, 0x7f, 0x00, 0xe0, 0x0f,
  0x3f, 0x00, 0xe0, 0x07, 0x3f, 0x00, 0xe0, 0x07, 0x3f, 0x00, 0xe0, 0x07, 0xff, 0xff, 0xe3, 0x07,
  0xff, 0xff, 0xe3, 0x03, 0xff, 0xff, 0xf3, 0x03, 0xfe, 0xff, 0xf3, 0x01, 0xfc, 0xff, 0xf3, 0x00,
  0xf8, 0xff, 0x31, 0x00
};
// 'digit_1', 32x49px
const unsigned char epd_bitmap_digit_1 [] PROGMEM = {
  0x00, 0x24, 0x49, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x80, 0x24, 0x49, 0xe2,
  0x00, 0x00, 0x00, 0xf0, 0x00, 0x00, 0x00, 0xf8, 0x00, 0x00, 0x00, 0xfc, 0x00, 0x00, 0x00, 0xfc,
  0x00, 0x00, 0x00, 0xfc, 0x90, 0x04, 0x00, 0xfe, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x7e,
  0x90, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x7e, 0x90, 0x00, 0x00, 0x7e,
  0x00, 0x00, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x7f, 0x90, 0x20, 0x00, 0x3f, 0x00, 0x00, 0x00, 0x3f,
  0x00, 0x00, 0x00, 0x38, 0x90, 0x20, 0x09, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x80, 0x0f,
  0x10, 0x20, 0x89, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x1f, 0x90, 0x00, 0x80, 0x1f,
  0x00, 0x00, 0x80, 0x1f, 0x00, 0x00, 0x80, 0x1f, 0x92, 0x00, 0xc0, 0x1f, 0x00, 0x00, 0xc0, 0x1f,
  0x00, 0x00, 0xc0, 0x1f, 0x10, 0x00, 0xc0, 0x0f, 0x00, 0x00, 0xc0, 0x0f, 0x00, 0x00, 0xc0, 0x0f,
  0x12, 0x00, 0xc0, 0x0f, 0x00, 0x00, 0xe0, 0x0f, 0x00, 0x00, 0xe0, 0x0f, 0x12, 0x00, 0xe0, 0x0f,
  0x00, 0x00, 0xe0, 0x07, 0x00, 0x00, 0xe0, 0x07, 0x12, 0x00, 0xe0, 0x07, 0x00, 0x00, 0xe0, 0x07,
  0x00, 0x00, 0xe0, 0x03, 0x92, 0x24, 0xf1, 0x03, 0x00, 0x00, 0xf0, 0x01, 0x00, 0x00, 0xf0, 0x00,
  0x90, 0x24, 0x31, 0x00
};
// 'digit_2', 32x49px
const unsigned char epd_bitmap_digit_2 [] PROGMEM = {
  0x00, 0xfc, 0xff, 0x1f, 0x00, 0xff, 0xff, 0x0f, 0x80, 0xff, 0xff, 0x47, 0xc0, 0xff, 0xff, 0xe3,
  0x00, 0xff, 0xff, 0xf1, 0x00, 0xfc, 0xff, 0xf8, 0x20, 0x00, 0x00, 0xfc, 0x00, 0x00, 0x00, 0xfc,
  0x00, 0x00, 0x00, 0xfc, 0x20, 0x01, 0x00, 0xfe, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x7e,
  0x20, 0x01, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x7e, 0x20, 0x01, 0x00, 0x7e,
  0x00, 0x00, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x7f, 0x20, 0x31, 0x00, 0x3f, 0x00, 0xf0, 0x01, 0x3f,
  0x00, 0xf0, 0x07, 0x38, 0x20, 0xf9, 0x1f, 0x00, 0x00, 0xf8, 0x1f, 0x00, 0x00, 0xf8, 0x1f, 0x00,
  0x1c, 0xf0, 0x9f, 0x24, 0x7c, 0x80, 0x1f, 0x00, 0xfc, 0x00, 0x1e, 0x00, 0xfc, 0x00, 0x80, 0x04,
  0xfc, 0x00, 0x00, 0x00, 0xfc, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x80, 0x04, 0xfe, 0x00, 0x00, 0x00,
  0x7c, 0x00, 0x00, 0x00, 0x70, 0x00, 0x80, 0x04, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x1e, 0x00, 0x80, 0x04, 0x7f, 0x00, 0x00, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x7f, 0x00, 0x80, 0x04,
  0x3f, 0x00, 0x00, 0x00, 0x3f, 0x00, 0x00, 0x00, 0x3f, 0x00, 0x80, 0x04, 0xff, 0xff, 0x03, 0x00,
  0xff, 0xff, 0x03, 0x00, 0xff, 0xff, 0x93, 0x00, 0xfe, 0xff, 0x03, 0x00, 0xfc, 0xff, 0x03, 0x00,
  0xf8, 0xff, 0x11, 0x00
};
// 'digit_3', 32x49px
const unsigned char epd_bitmap_digit_3 [] PROGMEM = {
  0x00, 0xfc, 0xff, 0x1f, 0x00, 0xff, 0xff, 0x0f, 0x80, 0xff, 0xff, 0x47, 0xc0, 0xff, 0xff, 0xe3,
  0x00, 0xff, 0xff, 0xf1, 0x00, 0xfc, 0xff, 0xf8, 0x00, 0x00, 0x00, 0xfc, 0x00, 0x00, 0x00, 0xfc,
  0x00, 0x00, 0x00, 0xfc, 0x40, 0x02, 0x00, 0xfe, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x7e,
  0x40, 0x02, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x7e, 0x40, 0x02, 0x00, 0x7e,
  0x00, 0x00, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x7f, 0x48, 0x30, 0x00, 0x3f, 0x00, 0xf0, 0x01, 0x3f,
  0x00, 0xf0, 0x07, 0x38, 0x48, 0xf8, 0x1f, 0x00, 0x00, 0xf8, 0x1f, 0x01, 0x00, 0xf8, 0x9f, 0x0f,
  0x08, 0xf0, 0x9f, 0x3f, 0x00, 0x80, 0x9f, 0x3f, 0x00, 0x00, 0x9e, 0x1f, 0x48, 0x00, 0x80, 0x1f,
  0x00, 0x00, 0x80, 0x1f, 0x00, 0x00, 0x80, 0x1f, 0x48, 0x00, 0xc0, 0x1f, 0x00, 0x00, 0xc0, 0x1f,
  0x00, 0x00, 0xc0, 0x1f, 0x40, 0x00, 0xc0, 0x0f, 0x00, 0x00, 0xc0, 0x0f, 0x02, 0x00, 0xc0, 0x0f,
  0x1e, 0x00, 0xc0, 0x0f, 0x7f, 0x00, 0xe0, 0x0f, 0x7f, 0x00, 0xe0, 0x0f, 0x7f, 0x00, 0xe0, 0x0f,
  0x3f, 0x00, 0xe0, 0x07, 0x3f, 0x00, 0xe0, 0x07, 0x3f, 0x00, 0xe0, 0x07, 0xff, 0xff, 0xe3, 0x07,
  0xff, 0xff, 0xe3, 0x03, 0xff, 0xff, 0xf3, 0x03, 0xfe, 0xff, 0xf3, 0x01, 0xfc, 0xff, 0xf3, 0x00,
  0xf8, 0xff, 0x31, 0x00
};
// 'digit_5', 32x49px
const unsigned char epd_bitmap_digit_5 [] PROGMEM = {
  0x00, 0xfc, 0xff, 0x1f, 0x00, 0xff, 0xff, 0x0f, 0x80, 0xff, 0xff, 0x07, 0xc0, 0xff, 0xff, 0x23,
  0x00, 0xff, 0xff, 0x01, 0x00, 0xfc, 0xff, 0x00, 0x20, 0x00, 0x00, 0x24, 0xe0, 0x00, 0x00, 0x00,
  0xe0, 0x07, 0x00, 0x00, 0xf0, 0x07, 0x00, 0x24, 0xf0, 0x07, 0x00, 0x00, 0xf0, 0x03, 0x00, 0x00,
  0xf0, 0x03, 0x00, 0x24, 0xf0, 0x03, 0x00, 0x00, 0xf0, 0x03, 0x00, 0x00, 0xf0, 0x03, 0x00, 0x24,
  0xf8, 0x03, 0x00, 0x00, 0xf8, 0x03, 0x00, 0x00, 0xf8, 0x31, 0x00, 0x24, 0xf8, 0xf1, 0x01, 0x00,
  0xf8, 0xf1, 0x07, 0x00, 0xf8, 0xf9, 0x1f, 0x00, 0xc0, 0xf9, 0x1f, 0x01, 0x00, 0xf8, 0x9f, 0x0f,
  0x04, 0xf0, 0x9f, 0x3f, 0x00, 0x80, 0x9f, 0x3f, 0x00, 0x00, 0x9e, 0x1f, 0x24, 0x00, 0x80, 0x1f,
  0x00, 0x00, 0x80, 0x1f, 0x00, 0x00, 0x80, 0x1f, 0x24, 0x00, 0xc0, 0x1f, 0x00, 0x00, 0xc0, 0x1f,
  0x00, 0x00, 0xc0, 0x1f, 0x20, 0x00, 0xc0, 0x0f, 0x00, 0x00, 0xc0, 0x0f, 0x02, 0x00, 0xc0, 0x0f,
  0x1e, 0x00, 0xc0, 0x0f, 0x7f, 0x00, 0xe0, 0x0f, 0x7f, 0x00, 0xe0, 0x0f, 0x7f, 0x00, 0xe0, 0x0f,
  0x3f, 0x00, 0xe0, 0x07, 0x3f, 0x00, 0xe0, 0x07, 0x3f, 0x00, 0xe0, 0x07, 0xff, 0xff, 0xe3, 0x07,
  0xff, 0xff, 0xe3, 0x03, 0xff, 0xff, 0xf3, 0x03, 0xfe, 0xff, 0xf3, 0x01, 0xfc, 0xff, 0xf3, 0x00,
  0xf8, 0xff, 0x31, 0x00
};
// 'digit_4', 32x49px
const unsigned char epd_bitmap_digit_4 [] PROGMEM = {
  0x00, 0x24, 0x49, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x80, 0x24, 0x49, 0xe2,
  0x00, 0x00, 0x00, 0xf0, 0x00, 0x00, 0x00, 0xf8, 0x20, 0x00, 0x00, 0xfc, 0xe0, 0x00, 0x00, 0xfc,
  0xe0, 0x07, 0x00, 0xfc, 0xf0, 0x07, 0x00, 0xfe, 0xf0, 0x07, 0x00, 0xfe, 0xf0, 0x03, 0x00, 0x7e,
  0xf0, 0x03, 0x00, 0x7e, 0xf0, 0x03, 0x00, 0x7e, 0xf0, 0x03, 0x00, 0x7e, 0xf0, 0x03, 0x00, 0x7e,
  0xf8, 0x03, 0x00, 0x7f, 0xf8, 0x03, 0x00, 0x7f, 0xf8, 0x31, 0x00, 0x3f, 0xf8, 0xf1, 0x01, 0x3f,
  0xf8, 0xf1, 0x07, 0x38, 0xf8, 0xf9, 0x1f, 0x00, 0xc0, 0xf9, 0x1f, 0x01, 0x00, 0xf8, 0x9f, 0x0f,
  0x10, 0xf0, 0x9f, 0x3f, 0x00, 0x80, 0x9f, 0x3f, 0x00, 0x00, 0x9e, 0x1f, 0x90, 0x00, 0x80, 0x1f,
  0x00, 0x00, 0x80, 0x1f, 0x00, 0x00, 0x80, 0x1f, 0x92, 0x00, 0xc0, 0x1f, 0x00, 0x00, 0xc0, 0x1f,
  0x00, 0x00, 0xc0, 0x1f, 0x10, 0x00, 0xc0, 0x0f, 0x00, 0x00, 0xc0, 0x0f, 0x00, 0x00, 0xc0, 0x0f,
  0x12, 0x00, 0xc0, 0x0f, 0x00, 0x00, 0xe0, 0x0f, 0x00, 0x00, 0xe0, 0x0f, 0x12, 0x00, 0xe0, 0x0f,
  0x00, 0x00, 0xe0, 0x07, 0x00, 0x00, 0xe0, 0x07, 0x12, 0x00, 0xe0, 0x07, 0x00, 0x00, 0xe0, 0x07,
  0x00, 0x00, 0xe0, 0x03, 0x92, 0x24, 0xf1, 0x03, 0x00, 0x00, 0xf0, 0x01, 0x00, 0x00, 0xf0, 0x00,
  0x90, 0x24, 0x31, 0x00
};
// 'digit_7', 32x49px
const unsigned char epd_bitmap_digit_7 [] PROGMEM = {
  0x00, 0xfc, 0xff, 0x1f, 0x00, 0xff, 0xff, 0x0f, 0x80, 0xff, 0xff, 0x47, 0xc0, 0xff, 0xff, 0xe3,
  0x00, 0xff, 0xff, 0xf1, 0x00, 0xfc, 0xff, 0xf8, 0x00, 0x00, 0x00, 0xfc, 0x00, 0x00, 0x00, 0xfc,
  0x00, 0x00, 0x00, 0xfc, 0x90, 0x04, 0x00, 0xfe, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x7e,
  0x90, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x7e, 0x90, 0x00, 0x00, 0x7e,
  0x00, 0x00, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x7f, 0x90, 0x20, 0x00, 0x3f, 0x00, 0x00, 0x00, 0x3f,
  0x00, 0x00, 0x00, 0x38, 0x90, 0x20, 0x09, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x80, 0x0f,
  0x10, 0x20, 0x89, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x1f, 0x90, 0x00, 0x80, 0x1f,
  0x00, 0x00, 0x80, 0x1f, 0x00, 0x00, 0x80, 0x1f, 0x92, 0x00, 0xc0, 0x1f, 0x00, 0x00, 0xc0, 0x1f,
  0x00, 0x00, 0xc0, 0x1f, 0x10, 0x00, 0xc0, 0x0f, 0x00, 0x00, 0xc0, 0x0f, 0x00, 0x00, 0xc0, 0x0f,
  0x12, 0x00, 0xc0, 0x0f, 0x00, 0x00, 0xe0, 0x0f, 0x00, 0x00, 0xe0, 0x0f, 0x12, 0x00, 0xe0, 0x0f,
  0x00, 0x00, 0xe0, 0x07, 0x00, 0x00, 0xe0, 0x07, 0x12, 0x00, 0xe0, 0x07, 0x00, 0x00, 0xe0, 0x07,
  0x00, 0x00, 0xe0, 0x03, 0x92, 0x24, 0xf1, 0x03, 0x00, 0x00, 0xf0, 0x01, 0x00, 0x00, 0xf0, 0x00,
  0x90, 0x24, 0x31, 0x00
};
// 'digit_6', 32x49px
const unsigned char epd_bitmap_digit_6 [] PROGMEM = {
  0x00, 0xfc, 0xff, 0x1f, 0x00, 0xff, 0xff, 0x0f, 0x80, 0xff, 0xff, 0x07, 0xc0, 0xff, 0xff, 0x43,
  0x00, 0xff, 0xff, 0x01, 0x00, 0xfc, 0xff, 0x00, 0x20, 0x00, 0x00, 0x48, 0xe0, 0x00, 0x00, 0x00,
  0xe0, 0x07, 0x00, 0x00, 0xf0, 0x07, 0x00, 0x48, 0xf0, 0x07, 0x00, 0x00, 0xf0, 0x03, 0x00, 0x00,
  0xf0, 0x03, 0x00, 0x48, 0xf0, 0x03, 0x00, 0x00, 0xf0, 0x03, 0x00, 0x00, 0xf0, 0x03, 0x00, 0x48,
  0xf8, 0x03, 0x00, 0x00, 0xf8, 0x03, 0x00, 0x00, 0xf8, 0x31, 0x00, 0x09, 0xf8, 0xf1, 0x01, 0x00,
  0xf8, 0xf1, 0x07, 0x00, 0xf8, 0xf9, 0x1f, 0x00, 0xc0, 0xf9, 0x1f, 0x01, 0x00, 0xf8, 0x9f, 0x0f,
  0x1c, 0xf0, 0x9f, 0x3f, 0x7c, 0x80, 0x9f, 0x3f, 0xfc, 0x00, 0x9e, 0x1f, 0xfc, 0x00, 0x80, 0x1f,
  0xfc, 0x00, 0x80, 0x1f, 0xfc, 0x00, 0x80, 0x1f, 0xfe, 0x00, 0xc0, 0x1f, 0xfe, 0x00, 0xc0, 0x1f,
  0x7c, 0x00, 0xc0, 0x1f, 0x70, 0x00, 0xc0, 0x0f, 0x00, 0x00, 0xc0, 0x0f, 0x02, 0x00, 0xc0, 0x0f,
  0x1e, 0x00, 0xc0, 0x0f, 0x7f, 0x00, 0xe0, 0x0f, 0x7f, 0x00, 0xe0, 0x0f, 0x7f, 0x00, 0xe0, 0x0f,
  0x3f, 0x00, 0xe0, 0x07, 0x3f, 0x00, 0xe0, 0x07, 0x3f, 0x00, 0xe0, 0x07, 0xff, 0xff, 0xe3, 0x07,
  0xff, 0xff, 0xe3, 0x03, 0xff, 0xff, 0xf3, 0x03, 0xfe, 0xff, 0xf3, 0x01, 0xfc, 0xff, 0xf3, 0x00,
  0xf8, 0xff, 0x31, 0x00
};
// 'digit_8', 32x49px
const unsigned char epd_bitmap_digit_8 [] PROGMEM = {
  0x00, 0xfc, 0xff, 0x1f, 0x00, 0xff, 0xff, 0x0f, 0x80, 0xff, 0xff, 0x47, 0xc0, 0xff, 0xff, 0xe3,
  0x00, 0xff, 0xff, 0xf1, 0x00, 0xfc, 0xff, 0xf8, 0x20, 0x00, 0x00, 0xfc, 0xe0, 0x00, 0x00, 0xfc,
  0xe0, 0x07, 0x00, 0xfc, 0xf0, 0x07, 0x00, 0xfe, 0xf0, 0x07, 0x00, 0xfe, 0xf0, 0x03, 0x00, 0x7e,
  0xf0, 0x03, 0x00, 0x7e, 0xf0, 0x03, 0x00, 0x7e, 0xf0, 0x03, 0x00, 0x7e, 0xf0, 0x03, 0x00, 0x7e,
  0xf8, 0x03, 0x00, 0x7f, 0xf8, 0x03, 0x00, 0x7f, 0xf8, 0x31, 0x00, 0x3f, 0xf8, 0xf1, 0x01, 0x3f,
  0xf8, 0xf1, 0x07, 0x38, 0xf8, 0xf9, 0x1f, 0x00, 0xc0, 0xf9, 0x1f, 0x01, 0x00, 0xf8, 0x9f, 0x0f,
  0x1c, 0xf0, 0x9f, 0x3f, 0x7c, 0x80, 0x9f, 0x3f, 0xfc, 0x00, 0x9e, 0x1f, 0xfc, 0x00, 0x80, 0x1f,
  0xfc, 0x00, 0x80, 0x1f, 0xfc, 0x00, 0x80, 0x1f, 0xfe, 0x00, 0xc0, 0x1f, 0xfe, 0x00, 0xc0, 0x1f,
  0x7c, 0x00, 0xc0, 0x1f, 0x70, 0x00, 0xc0, 0x0f, 0x00, 0x00, 0xc0, 0x0f, 0x02, 0x00, 0xc0, 0x0f,
  0x1e, 0x00, 0xc0, 0x0f, 0x7f, 0x00, 0xe0, 0x0f, 0x7f, 0x00, 0xe0, 0x0f, 0x7f, 0x00, 0xe0, 0x0f,
  0x3f, 0x00, 0xe0, 0x07, 0x3f, 0x00, 0xe0, 0x07, 0x3f, 0x00, 0xe0, 0x07, 0xff, 0xff, 0xe3, 0x07,
  0xff, 0xff, 0xe3, 0x03, 0xff, 0xff, 0xf3, 0x03, 0xfe, 0xff, 0xf3, 0x01, 0xfc, 0xff, 0xf3, 0x00,
  0xf8, 0xff, 0x31, 0x00
};
// 'digit_9', 32x49px
const unsigned char epd_bitmap_digit_9 [] PROGMEM = {
  0x00, 0xfc, 0xff, 0x1f, 0x00, 0xff, 0xff, 0x0f, 0x80, 0xff, 0xff, 0x47, 0xc0, 0xff, 0xff, 0xe3,
  0x00, 0xff, 0xff, 0xf1, 0x00, 0xfc, 0xff, 0xf8, 0x20, 0x00, 0x00, 0xfc, 0xe0, 0x00, 0x00, 0xfc,
  0xe0, 0x07, 0x00, 0xfc, 0xf0, 0x07, 0x00, 0xfe, 0xf0, 0x07, 0x00, 0xfe, 0xf0, 0x03, 0x00, 0x7e,
  0xf0, 0x03, 0x00, 0x7e, 0xf0, 0x03, 0x00, 0x7e, 0xf0, 0x03, 0x00, 0x7e, 0xf0, 0x03, 0x00, 0x7e,
  0xf8, 0x03, 0x00, 0x7f, 0xf8, 0x03, 0x00, 0x7f, 0xf8, 0x31, 0x00, 0x3f, 0xf8, 0xf1, 0x01, 0x3f,
  0xf8, 0xf1, 0x07, 0x38, 0xf8, 0xf9, 0x1f, 0x00, 0xc0, 0xf9, 0x1f, 0x01, 0x00, 0xf8, 0x9f, 0x0f,
  0x08, 0xf0, 0x9f, 0x3f, 0x00, 0x80, 0x9f, 0x3f, 0x00, 0x00, 0x9e, 0x1f, 0x48, 0x00, 0x80, 0x1f,
  0x00, 0x00, 0x80, 0x1f, 0x00, 0x00, 0x80, 0x1f, 0x48, 0x00, 0xc0, 0x1f, 0x00, 0x00, 0xc0, 0x1f,
  0x00, 0x00, 0xc0, 0x1f, 0x40, 0x00, 0xc0, 0x0f, 0x00, 0x00, 0xc0, 0x0f, 0x02, 0x00, 0xc0, 0x0f,
  0x1e, 0x00, 0xc0, 0x0f, 0x7f, 0x00, 0xe0, 0x0f, 0x7f, 0x00, 0xe0, 0x0f, 0x7f, 0x00, 0xe0, 0x0f,
  0x3f, 0x00, 0xe0, 0x07, 0x3f, 0x00, 0xe0, 0x07, 0x3f, 0x00, 0xe0, 0x07, 0xff, 0xff, 0xe3, 0x07,
  0xff, 0xff, 0xe3, 0x03, 0xff, 0xff, 0xf3, 0x03, 0xfe, 0xff, 0xf3, 0x01, 0xfc, 0xff, 0xf3, 0x00,
  0xf8, 0xff, 0x31, 0x00
};

// Array of all digits
const unsigned char* bitmaps_digits[10] = {
  epd_bitmap_digit_0,
  epd_bitmap_digit_1,
  epd_bitmap_digit_2,
  epd_bitmap_digit_3,
  epd_bitmap_digit_4,
  epd_bitmap_digit_5,
  epd_bitmap_digit_6,
  epd_bitmap_digit_7,
  epd_bitmap_digit_8,
  epd_bitmap_digit_9
};

int hours = 12; // hours, will be set using the RTC
int minutes = 34; // minutes, will be set using the RTC
int seconds = 56; // seconds, will be set using the RTC

void setup(void) {
  u8g2.begin(); // start the u8g2 library
  rtc.begin(); // initialize the RTC module
  rtc.adjust(DateTime(F(__DATE__), F(__TIME__))); // set the time and date to the time and date of uploading the sketch
}

void loop(void) {

  DateTime now = rtc.now(); // get current time from the RTC module
  hours = now.hour(); // read hours
  minutes = now.minute(); // read minutes
  seconds = now.second(); // read seconds

  // the code below is for manually increasing seconds, minutes and hours,
  // use it in case you want to test it without the RTC module
  /*  seconds++;
    if (seconds >= 60) {
      seconds = 0;
      minutes++;
      if (minutes >= 60) {
        minutes = 0;
        hours++;
        if (hours >= 24) {
          hours = 0;
        }
      }
    }*/

  u8g2.clearBuffer(); // clear the internal memory for drawing content
  u8g2.setBitmapMode(1); // draw transparent images

  // draw digits for hours
  u8g2.drawXBMP(0, 7, 32, 49, bitmaps_digits[hours / 10]); // first digit for hours
  u8g2.drawXBMP(30, 7, 32, 49, bitmaps_digits[hours % 10]); // second digit for hours

  // only show the colon in between every two seconds
  if (seconds % 2 == 0) { // the result will be 0 or 1 depending if the value is even or odd
    u8g2.drawBox(63, 21, 4, 4); // draw filled rectangle
    u8g2.drawBox(61, 37, 4, 4); // draw filled rectangle
  }

  // draw digits for minutes
  u8g2.drawXBMP(66, 7, 32, 49, bitmaps_digits[minutes / 10]); // first digit for minutes
  u8g2.drawXBMP(96, 7, 32, 49, bitmaps_digits[minutes % 10]); // second digit for minutes

  u8g2.sendBuffer(); // transfer internal memory to the display
  //delay(1000);  // one second delay, not required if we get time from RTC module
}
